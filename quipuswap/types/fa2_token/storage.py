# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class LedgerItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: str


class Key1(BaseModel):
    class Config:
        extra = Extra.forbid

    operator: str
    owner: str
    token_id: str


class Operator(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key1
    value: Dict[str, Any]


class TokenMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    token_id: str
    token_info: Dict[str, str]


class Fa2TokenStorage(BaseModel):
    class Config:
        extra = Extra.ignore

    # administrator: str
    # all_tokens: str
    # ledger: List[LedgerItem]
    # max_supply: Dict[str, str]
    # metadata: Dict[str, str]
    # minter: str
    # operators: List[Operator]
    # paused: bool
    # pending_admin: Optional[str]
    # token_metadata: Dict[str, TokenMetadata]
    # total_supply: Dict[str, str]
